apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.antocistudios.ndktest.androidndk"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    sourceSets.main {
        // hack to disable automatic ndk-build call
        jni.srcDirs = []
        // set the location of the compiled native libs
        jniLibs.srcDir 'src/main/libs'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21.0.3'
}

// Manual call the ndk-build command
task buildNative(type: Exec) {
    // Get the build file
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    print ndkDir
    def ndkBuild = new File(ndkDir, 'ndk-build')
    print ndkBuild

    // Get the source directory
    def jniSrc = file('src/main/jni').absolutePath
    commandLine ndkBuild, "--directory", jniSrc
}

// Manual call the ndk-build clean command
task cleanNative(type: Exec) {
    // Get the build file
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir')
    def ndkBuild = new File(ndkDir, 'ndk-build')
    print ndkBuild

    // Get the source directory
    def jniSrc = file('src/main/jni').absolutePath
    commandLine ndkBuild, "--directory", jniSrc, "clean"
}

// make java compile tasks depend on the ndk task
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn buildNative
}

// make the global clean depend on the ndk clean task
clean.dependsOn cleanNative
